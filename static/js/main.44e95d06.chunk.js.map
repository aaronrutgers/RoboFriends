{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.44e95d06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='serach'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oppps. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\nimport { setSearchFeild, requestRobots } from \"../actions\";\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchFeild(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    // 有了redux就不需要了\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         robots: [],\n    //         // 有了redux就不需要状态了\n    //         // searchfield: ''\n    //     }\n    // }\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    // 有了redux就不需要了\n    // onSearchChange = (event) => {\n    //     this.setState({ searchfield: event.target.value })\n    // }\n\n    render() {\n        // 有了redux就不需要了\n        // const { robots } = this.state\n\n        const { robots, searchField, onSearchChange, isPending } = this.props\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n\n        return isPending ?\n            <h1>Loading</h1> :\n            <div className='tc'>\n                <h1 className=\"f1\">RobotFriends</h1>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchFeild = (text) => {\n    console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    console.log(action.type);\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport 'tachyons'\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}